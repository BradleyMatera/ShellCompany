const request = require('supertest');
const assert = require('assert');
const express = require('express');
const path = require('path');
const { sequelize } = require('../models');
const WorkflowOrchestrator = require('../services/workflow-orchestrator');

// Mock app setup for testing
const app = express();
app.use(express.json());

// Mock auth middleware for testing
const mockAuth = (req, res, next) => {
  req.user = { id: 1, name: 'Test User' };
  next();
};

// Setup routes with mock auth
const autonomousRoutes = require('../routes/autonomous-api');
app.use('/api', mockAuth, autonomousRoutes);

describe('Workflow API Endpoints', function() {
  this.timeout(30000);

  let orchestrator;
  let testWorkspaceRoot;

  before(async function() {
    // Setup test environment
    testWorkspaceRoot = path.join(__dirname, 'test-api-workspace');
    orchestrator = new WorkflowOrchestrator(testWorkspaceRoot, null, {
      autoStart: false,
      isHeadless: true
    });

    // Attach orchestrator to app locals for routes
    app.locals.orchestrator = orchestrator;

    console.log('✅ API test setup complete');
  });

  after(async function() {
    if (orchestrator) {
      await orchestrator.shutdown();
    }
    console.log('✅ API test cleanup complete');
  });

  describe('POST /api/workflow', function() {
    it('should create workflow with proper manager selection', async function() {
      const response = await request(app)
        .post('/api/workflow')
        .send({\n          directive: 'have Sage create documentation for the API'\n        })\n        .expect(201);\n\n      assert(response.body.success, 'Should return success');\n      assert(response.body.workflowId, 'Should return workflow ID');\n\n      const workflowId = response.body.workflowId;\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n      \n      assert(workflow, 'Workflow should exist');\n      assert.strictEqual(workflow.directive, 'have Sage create documentation for the API');\n\n      // Check manager selection\n      const managerBriefTask = workflow.tasks.find(t => t.type === 'manager_brief');\n      assert(managerBriefTask, 'Should have manager brief task');\n      assert.strictEqual(managerBriefTask.assignedAgent, 'Sage', 'Should assign Sage for docs directive');\n\n      console.log('✅ Workflow creation API working with proper manager selection');\n    });\n\n    it('should handle directives requiring clarification', async function() {\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'create a landing page'\n        })\n        .expect(201);\n\n      const workflowId = response.body.workflowId;\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n\n      if (workflow.metadata?.requiresClarification) {\n        assert.strictEqual(workflow.status, 'awaiting_clarification', 'Should be awaiting clarification');\n        assert(workflow.metadata.clarifyingQuestions.length > 0, 'Should have clarifying questions');\n        console.log('✅ Clarification gate working via API');\n      } else {\n        console.log('ℹ️ No clarification required for this directive');\n      }\n    });\n  });\n\n  describe('POST /api/workflows/:workflowId/clarify', function() {\n    let workflowId;\n\n    before(async function() {\n      // Create a workflow that requires clarification\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'build something for users'\n        });\n      workflowId = response.body.workflowId;\n    });\n\n    it('should accept clarification responses', async function() {\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n      \n      if (workflow.metadata?.requiresClarification) {\n        const response = await request(app)\n          .post(`/api/workflows/${workflowId}/clarify`)\n          .send({\n            responses: {\n              'What specific functionality should be built?': 'User dashboard with analytics',\n              'What technology stack should be used?': 'React and Node.js',\n              'What is the target completion date?': 'End of this sprint'\n            }\n          })\n          .expect(200);\n\n        assert(response.body.success, 'Should return success');\n        assert.strictEqual(response.body.status, 'proceeding', 'Should be proceeding');\n\n        const updatedWorkflow = orchestrator.getWorkflowStatus(workflowId);\n        assert(updatedWorkflow.metadata.clarificationResponses, 'Should have responses stored');\n        assert.strictEqual(updatedWorkflow.status, 'in_progress', 'Should be in progress');\n\n        console.log('✅ Clarification responses API working');\n      } else {\n        console.log('ℹ️ Skipping clarification test - not required');\n      }\n    });\n\n    it('should validate clarification request body', async function() {\n      await request(app)\n        .post(`/api/workflows/${workflowId}/clarify`)\n        .send({})\n        .expect(400);\n\n      await request(app)\n        .post(`/api/workflows/${workflowId}/clarify`)\n        .send({ responses: 'not an object' })\n        .expect(400);\n\n      console.log('✅ Clarification API validation working');\n    });\n  });\n\n  describe('POST /api/workflows/:workflowId/proceed-without-answers', function() {\n    let workflowId;\n\n    before(async function() {\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'create something interesting'\n        });\n      workflowId = response.body.workflowId;\n    });\n\n    it('should allow proceeding without clarification answers', async function() {\n      const response = await request(app)\n        .post(`/api/workflows/${workflowId}/proceed-without-answers`)\n        .send({\n          managerDecision: 'Proceeding with best judgment based on available information'\n        })\n        .expect(200);\n\n      assert(response.body.success, 'Should return success');\n      assert.strictEqual(response.body.status, 'proceeding_without_answers', 'Should be proceeding without answers');\n\n      console.log('✅ Proceed without answers API working');\n    });\n  });\n\n  describe('POST /api/workflows/:workflowId/brief/approve', function() {\n    let workflowId;\n\n    before(async function() {\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'have Nova create a user profile component'\n        });\n      workflowId = response.body.workflowId;\n    });\n\n    it('should approve manager brief and schedule pending tasks', async function() {\n      const response = await request(app)\n        .post(`/api/workflows/${workflowId}/brief/approve`)\n        .send({\n          approved: true,\n          approver: 'manager',\n          completedBrief: {\n            requestedAgent: 'Nova',\n            projectType: 'frontend',\n            scope: 'Component development',\n            timeline: 'This sprint'\n          }\n        })\n        .expect(200);\n\n      assert(response.body.success, 'Should return success');\n      assert(response.body.scheduled > 0, 'Should schedule pending tasks');\n\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n      assert(workflow.brief, 'Should have brief attached');\n      assert.strictEqual(workflow.manager, 'Nova', 'Should set manager correctly');\n\n      // Should have manager_review task\n      const reviewTask = workflow.tasks.find(t => t.type === 'manager_review');\n      assert(reviewTask, 'Should have manager review task');\n\n      console.log('✅ Brief approval API working');\n    });\n\n    it('should handle brief rejection', async function() {\n      const response2 = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'create another component'\n        });\n      \n      const secondWorkflowId = response2.body.workflowId;\n\n      const response = await request(app)\n        .post(`/api/workflows/${secondWorkflowId}/brief/approve`)\n        .send({\n          approved: false,\n          approver: 'manager'\n        })\n        .expect(200);\n\n      assert(!response.body.success, 'Should return failure for rejection');\n      assert.strictEqual(response.body.message, 'brief_not_approved', 'Should indicate brief not approved');\n\n      console.log('✅ Brief rejection API working');\n    });\n  });\n\n  describe('POST /api/workflows/:workflowId/approve', function() {\n    let workflowId;\n\n    before(async function() {\n      // Create and fully process a workflow for CEO approval\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'have Zephyr create API endpoints'\n        });\n      workflowId = response.body.workflowId;\n\n      // Approve the brief\n      await request(app)\n        .post(`/api/workflows/${workflowId}/brief/approve`)\n        .send({\n          approved: true,\n          completedBrief: {\n            requestedAgent: 'Zephyr',\n            projectType: 'backend'\n          }\n        });\n\n      // Simulate task completion\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n      workflow.tasks.forEach(task => {\n        task.status = 'completed';\n        task.endTime = Date.now();\n      });\n      await orchestrator.updateWorkflowProgress(workflowId);\n    });\n\n    it('should record CEO approval and complete workflow', async function() {\n      const response = await request(app)\n        .post(`/api/workflows/${workflowId}/approve`)\n        .send({\n          approved: true,\n          approver: 'ceo'\n        })\n        .expect(200);\n\n      assert(response.body.success, 'Should return success');\n      assert(response.body.ceoApproved, 'Should indicate CEO approval');\n\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n      assert(workflow.metadata.ceoApproved, 'Should have CEO approval recorded');\n\n      console.log('✅ CEO approval API working');\n    });\n\n    it('should handle CEO rejection', async function() {\n      const response2 = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'create test workflow for rejection'\n        });\n      \n      const secondWorkflowId = response2.body.workflowId;\n\n      const response = await request(app)\n        .post(`/api/workflows/${secondWorkflowId}/approve`)\n        .send({\n          approved: false,\n          approver: 'ceo'\n        })\n        .expect(200);\n\n      assert(response.body.success, 'Should return success');\n      assert(!response.body.ceoApproved, 'Should indicate CEO rejection');\n\n      console.log('✅ CEO rejection API working');\n    });\n  });\n\n  describe('POST /api/workflows/:workflowId/reject', function() {\n    let workflowId;\n\n    before(async function() {\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'workflow to be rejected'\n        });\n      workflowId = response.body.workflowId;\n    });\n\n    it('should reject workflow with reason', async function() {\n      const response = await request(app)\n        .post(`/api/workflows/${workflowId}/reject`)\n        .send({\n          rejector: 'manager',\n          reason: 'Requirements are unclear and need more specification'\n        })\n        .expect(200);\n\n      assert(response.body.success, 'Should return success');\n      assert(response.body.rejected, 'Should indicate rejection');\n      assert.strictEqual(response.body.reason, 'Requirements are unclear and need more specification');\n\n      const workflow = orchestrator.getWorkflowStatus(workflowId);\n      assert.strictEqual(workflow.status, 'rejected', 'Should have rejected status');\n      assert(workflow.metadata.rejectionReason, 'Should have rejection reason');\n\n      console.log('✅ Workflow rejection API working');\n    });\n  });\n\n  describe('GET /api/workflows', function() {\n    it('should return list of workflows', async function() {\n      const response = await request(app)\n        .get('/api/workflows')\n        .expect(200);\n\n      assert(Array.isArray(response.body), 'Should return array of workflows');\n      \n      if (response.body.length > 0) {\n        const workflow = response.body[0];\n        assert(workflow.id, 'Workflow should have ID');\n        assert(workflow.directive, 'Workflow should have directive');\n        assert(workflow.status, 'Workflow should have status');\n        assert(workflow.tasks, 'Workflow should have tasks');\n      }\n\n      console.log('✅ Workflows list API working');\n    });\n  });\n\n  describe('GET /api/workflows/:workflowId', function() {\n    let workflowId;\n\n    before(async function() {\n      const response = await request(app)\n        .post('/api/workflow')\n        .send({\n          directive: 'workflow for individual retrieval test'\n        });\n      workflowId = response.body.workflowId;\n    });\n\n    it('should return individual workflow details', async function() {\n      const response = await request(app)\n        .get(`/api/workflows/${workflowId}`)\n        .expect(200);\n\n      assert(response.body.id, 'Should have workflow ID');\n      assert(response.body.directive, 'Should have directive');\n      assert(response.body.status, 'Should have status');\n      assert(response.body.tasks, 'Should have tasks');\n      assert(response.body.progress, 'Should have progress');\n      assert(response.body.artifacts, 'Should have artifacts');\n\n      console.log('✅ Individual workflow retrieval API working');\n    });\n\n    it('should return 404 for non-existent workflow', async function() {\n      await request(app)\n        .get('/api/workflows/non-existent-id')\n        .expect(404);\n\n      console.log('✅ Workflow 404 handling working');\n    });\n  });\n\n  describe('Error Handling', function() {\n    it('should handle missing orchestrator gracefully', async function() {\n      // Temporarily remove orchestrator\n      const originalOrchestrator = app.locals.orchestrator;\n      delete app.locals.orchestrator;\n\n      await request(app)\n        .post('/api/workflow')\n        .send({ directive: 'test directive' })\n        .expect(500);\n\n      // Restore orchestrator\n      app.locals.orchestrator = originalOrchestrator;\n\n      console.log('✅ Missing orchestrator error handling working');\n    });\n\n    it('should validate required fields', async function() {\n      await request(app)\n        .post('/api/workflow')\n        .send({})\n        .expect(400);\n\n      await request(app)\n        .post('/api/workflow')\n        .send({ directive: '' })\n        .expect(400);\n\n      console.log('✅ Required field validation working');\n    });\n  });\n});\n\nconsole.log('API tests for workflow endpoints created');