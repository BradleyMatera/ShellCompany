const { Workflow, Artifact, Project } = require('./models');
const WorkflowOrchestrator = require('./services/workflow-orchestrator');
const ArtifactLineage = require('./services/artifact-lineage');

(async () => {
  try {
  const orchestrator = new WorkflowOrchestrator(__dirname + '/agent-workspaces', null, { autoStart: false });

    // Create a dummy workflow row directly
    const workflowId = 'test-reconcile-workflow-' + Date.now();
    await Workflow.create({
      id: workflowId,
      directive: 'test reconcile flow',
      status: 'planned',
      start_time: new Date(),
      tasks: [],
      estimates: {},
      progress: { completed: 0, total: 0, percentage: 0 },
      artifacts: [],
      metadata: {}
    });

    // Prepare a pending artifact entry with checksum
    const checksum = 'deadbeef' + Date.now();
    const lineageData = {
      name: 'reconcile-test.txt',
      relativePath: 'artifacts/reconcile-test.txt',
      absolutePath: __dirname + '/agent-workspaces/test-workspace/artifacts/reconcile-test.txt',
      checksum,
      fileSize: 123,
      taskId: null
    };

    // Ensure pending list exists and push entry
    orchestrator.pendingArtifactPersist = orchestrator.pendingArtifactPersist || [];

    // Record a tracked artifact so trackedArtifactId is valid
    const tracked = await orchestrator.artifactLineage.recordArtifact(lineageData);
    orchestrator.pendingArtifactPersist.push({ workflowId, lineageData, trackedArtifactId: tracked.id });

    console.log('[TEST] Pending artifacts before reconcile:', orchestrator.pendingArtifactPersist.length);

    // Call reconcile once
    const count = await orchestrator.reconcilePendingArtifactsOnce();
    console.log('[TEST] reconcilePendingArtifactsOnce returned:', count);

    // Check DB for artifact row
    const found = await Artifact.findOne({ where: { sha256: checksum } });
    if (found) {
      console.log('[TEST] Artifact persisted with id:', found.id);
    } else {
      console.error('[TEST] Artifact was NOT persisted');
      process.exitCode = 2;
    }

    // Check workflow.artifacts updated
    const wf = await Workflow.findByPk(workflowId);
    console.log('[TEST] Workflow artifacts after reconcile:', wf.artifacts);

    // Clean up
    if (found) await found.destroy().catch(() => null);
    if (wf) await wf.destroy().catch(() => null);
    const p = await Project.findOne({ where: { name: 'Autogenerated' } }).catch(() => null);
    if (p) await p.destroy().catch(() => null);

  // Shutdown orchestrator to clear any intervals (safe even if autoStart:false)
  if (typeof orchestrator.shutdown === 'function') await orchestrator.shutdown();
  console.log('[TEST] Done');
  } catch (e) {
    console.error('[TEST] Error:', e && e.stack);
    process.exitCode = 1;
  }
})();
